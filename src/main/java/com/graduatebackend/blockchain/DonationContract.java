package com.graduatebackend.blockchain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Callable;

import lombok.extern.log4j.Log4j2;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
@Log4j2
public class DonationContract extends Contract {
    public static final String BINARY =
            "";
    public static final String FUNC_ADDDONATION = "addDonation";

    public static final String FUNC_ADDDONATIONUSAGE = "addDonationUsage";

    public static final String FUNC_GETBYDONATIONHASH = "getByDonationHash";

    public static final String FUNC_GETDONATIONCOUNT = "getDonationCount";

    public static final String FUNC_GETDONATIONS = "getDonations";

    public static final String FUNC_GETDONATIONSBYDONORTOKEN = "getDonationsByDonorToken";

    public static final String FUNC_GETDONATIONSBYPURPOSE = "getDonationsByPurpose";

    public static final String FUNC_GETDONATIONSBYPURPOSEFORUSE = "getDonationsByPurposeForUse";

    public static final String FUNC_GETDONORSTATS = "getDonorStats";

    public static final String FUNC_GETPURPOSESTATS = "getPurposeStats";

    public static final Event DONATIONADDED_EVENT = new Event("DonationAdded",
                                                              Arrays.<TypeReference<?>>asList(new TypeReference<Uint>() {
                                                              }, new TypeReference<Utf8String>() {
                                                              }, new TypeReference<Uint256>() {
                                                              }, new TypeReference<Bytes32>() {
                                                              }));

    public static final Event DONATIONUSAGEADDED_EVENT = new Event("DonationUsageAdded",
                                                                   Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                                   }, new TypeReference<Bytes32>() {
                                                                   }, new TypeReference<Uint256>() {
                                                                   }, new TypeReference<Bytes32>() {
                                                                   }, new TypeReference<Uint256>() {
                                                                   }, new TypeReference<Uint256>() {
                                                                   }, new TypeReference<Uint256>() {
                                                                   }));
    ;;

    @Deprecated
    protected DonationContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
                               BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DonationContract(String contractAddress, Web3j web3j, Credentials credentials,
                               ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DonationContract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                               BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DonationContract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                               ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DonationAddedEventResponse> getDonationAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DONATIONADDED_EVENT,
                                                                                    transactionReceipt);
        ArrayList<DonationAddedEventResponse> responses = new ArrayList<DonationAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DonationAddedEventResponse typedResponse = new DonationAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.donationId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.donorToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockHash = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.donationHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DonationAddedEventResponse> donationAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DonationAddedEventResponse>() {
            @Override
            public DonationAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DONATIONADDED_EVENT, log);
                DonationAddedEventResponse typedResponse = new DonationAddedEventResponse();
                typedResponse.log = log;
                typedResponse.donationId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.donorToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockHash = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.donationHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DonationAddedEventResponse> donationAddedEventFlowable(DefaultBlockParameter startBlock,
                                                                           DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DONATIONADDED_EVENT));
        return donationAddedEventFlowable(filter);
    }

    public static List<DonationUsageAddedEventResponse> getDonationUsageAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DONATIONUSAGEADDED_EVENT,
                                                                                          transactionReceipt);
        ArrayList<DonationUsageAddedEventResponse> responses =
                new ArrayList<DonationUsageAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DonationUsageAddedEventResponse typedResponse = new DonationUsageAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.donationId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.donationHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockHash = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.usageHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.usedAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.remainingAmount = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DonationUsageAddedEventResponse> donationUsageAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DonationUsageAddedEventResponse>() {
            @Override
            public DonationUsageAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DONATIONUSAGEADDED_EVENT, log);
                DonationUsageAddedEventResponse typedResponse = new DonationUsageAddedEventResponse();
                typedResponse.log = log;
                typedResponse.donationId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.donationHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockHash = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.usageHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.usedAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.remainingAmount = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DonationUsageAddedEventResponse> donationUsageAddedEventFlowable(DefaultBlockParameter startBlock,
                                                                                     DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DONATIONUSAGEADDED_EVENT));
        return donationUsageAddedEventFlowable(filter);
    }


    public RemoteFunctionCall<TransactionReceipt> addDonation(AddNewDonationContractRequestDto requestDto) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDDONATION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestDto.getDonationId()),
                                    new org.web3j.abi.datatypes.Utf8String(requestDto.getDonorToken()),
                                    new org.web3j.abi.datatypes.Utf8String(requestDto.getDonorName()),
                                    new org.web3j.abi.datatypes.generated.Uint256((long) requestDto.getAmount()),
                                    new org.web3j.abi.datatypes.generated.Uint256(requestDto.getDonationTime()),
                                    new org.web3j.abi.datatypes.generated.Uint256(requestDto.getPurposeId()),
                                    new org.web3j.abi.datatypes.Utf8String(requestDto.getPurpose()),
                                    new org.web3j.abi.datatypes.generated.Uint256(requestDto.getFamilyId())),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addDonationUsage(AddNewDonationUsageRequestDto requestDto) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDDONATIONUSAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestDto.getDonationId()),
                                    new org.web3j.abi.datatypes.generated.Bytes32(requestDto.getDonationHash()),
                                    new org.web3j.abi.datatypes.generated.Uint256((long) requestDto.getAmount()),
                                    new org.web3j.abi.datatypes.generated.Uint256(requestDto.getUsageTime()),
                                    new org.web3j.abi.datatypes.generated.Uint256(requestDto.getPurposeId()),
                                    new org.web3j.abi.datatypes.Utf8String(requestDto.getPurpose()),
                                    new org.web3j.abi.datatypes.generated.Uint256(requestDto.getFamilyId())),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getDonationCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETDONATIONCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Uint256.class);
    }

    public RemoteFunctionCall<List> getDonations() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDONATIONS,
                                                                                               Arrays.<Type>asList(),
                                                                                               Arrays.<TypeReference<
                                                                                                       ?>>asList(new TypeReference<DynamicArray<GetDonationContractInfo>>() {
                                                                                               }));
        return new RemoteFunctionCall<List>(function,
                                            new Callable<List>() {
                                                @Override
                                                @SuppressWarnings("unchecked")
                                                public List call() throws Exception {
                                                    List<Type> result =
                                                            (List<Type>) executeCallSingleValueReturn(function,
                                                                                                      List.class);
                                                    return convertToNative(result);
                                                }
                                            });
    }

    public RemoteFunctionCall<List> getDonationsByDonorToken(String donorToken) {
        final org.web3j.abi.datatypes.Function function =
                new org.web3j.abi.datatypes.Function(FUNC_GETDONATIONSBYDONORTOKEN,
                                                     Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(donorToken)),
                                                     Arrays.<TypeReference<
                                                             ?>>asList(new TypeReference<DynamicArray<GetDonationContractInfo>>() {
                                                     }));
        return new RemoteFunctionCall<List>(function,
                                            new Callable<List>() {
                                                @Override
                                                @SuppressWarnings("unchecked")
                                                public List call() throws Exception {
                                                    List<Type> result =
                                                            (List<Type>) executeCallSingleValueReturn(function,
                                                                                                      List.class);
                                                    return convertToNative(result);
                                                }
                                            });
    }

    public RemoteFunctionCall<GetDonationContractInfo> getByDonationHash(byte[] donationHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYDONATIONHASH,
                                                                                               Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(donationHash)),
                                                                                               Arrays.<TypeReference<
                                                                                                       ?>>asList(new TypeReference<GetDonationContractInfo>() {
                                                                                               }));
        return new RemoteFunctionCall<GetDonationContractInfo>(function,
                                                               new Callable<GetDonationContractInfo>() {
                                                                   @Override
                                                                   public GetDonationContractInfo call() throws
                                                                           Exception {
                                                                       GetDonationContractInfo donationContractInfo =
                                                                               null;
                                                                       Type result =
                                                                               (Type) executeCallSingleValueReturn(function);

                                                                       if (result != null)
                                                                           donationContractInfo =
                                                                                   convertToDonation(result);

                                                                       return donationContractInfo;
                                                                   }
                                                               });
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getDonorStats(String donorToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDONORSTATS,
                                                                                               Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(donorToken)),
                                                                                               Arrays.<TypeReference<
                                                                                                       ?>>asList(new TypeReference<Uint256>() {
                                                                                               }, new TypeReference<Uint256>() {
                                                                                               }, new TypeReference<Uint256>() {
                                                                                               }, new TypeReference<Uint256>() {
                                                                                               }));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                                                                                              new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                                                                                                  @Override
                                                                                                  public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                                                                                                      List<Type> results = executeCallMultipleValueReturn(function);
                                                                                                      return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                                                                                              (BigInteger) results.get(0)
                                                                                                                      .getValue(),
                                                                                                              (BigInteger) results.get(1)
                                                                                                                      .getValue(),
                                                                                                              (BigInteger) results.get(2)
                                                                                                                      .getValue(),
                                                                                                              (BigInteger) results.get(3)
                                                                                                                      .getValue());
                                                                                                  }
                                                                                              });
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getPurposeStats(
            Integer purposeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPURPOSESTATS,
                                                                                               Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(purposeId)),
                                                                                               Arrays.<TypeReference<
                                                                                                       ?>>asList(new TypeReference<Uint256>() {
                                                                                               }, new TypeReference<Uint256>() {
                                                                                               }, new TypeReference<Uint256>() {
                                                                                               }, new TypeReference<Uint256>() {
                                                                                               }));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                                                                                              new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                                                                                                  @Override
                                                                                                  public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                                                                                                      List<Type> results = executeCallMultipleValueReturn(function);
                                                                                                      return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                                                                                              (BigInteger) results.get(0)
                                                                                                                      .getValue(),
                                                                                                              (BigInteger) results.get(1)
                                                                                                                      .getValue(),
                                                                                                              (BigInteger) results.get(2)
                                                                                                                      .getValue(),
                                                                                                              (BigInteger) results.get(3)
                                                                                                                      .getValue());
                                                                                                  }
                                                                                              });
    }

    public RemoteFunctionCall<List> getDonationsByPurpose(Integer purposeId) {
        final org.web3j.abi.datatypes.Function function =
                new org.web3j.abi.datatypes.Function(FUNC_GETDONATIONSBYPURPOSE,
                                                     Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(purposeId)),
                                                     Arrays.<TypeReference<
                                                             ?>>asList(new TypeReference<DynamicArray<GetDonationContractInfo>>() {
                                                     }));
        return new RemoteFunctionCall<List>(function,
                                            new Callable<List>() {
                                                @Override
                                                @SuppressWarnings("unchecked")
                                                public List call() throws Exception {
                                                    List<Type> result =
                                                            (List<Type>) executeCallSingleValueReturn(function,
                                                                                                      List.class);
                                                    return convertToNative(result);
                                                }
                                            });
    }

    public RemoteFunctionCall<List> getDonationsByPurposeForUse(Integer purposeId, double amount) {
        final org.web3j.abi.datatypes.Function function =
                new org.web3j.abi.datatypes.Function(FUNC_GETDONATIONSBYPURPOSEFORUSE,
                                                     Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(purposeId),
                                                                         new org.web3j.abi.datatypes.generated.Uint256((long) amount)),
                                                     Arrays.<TypeReference<
                                                             ?>>asList(new TypeReference<DynamicArray<GetDonationContractInfo>>() {
                                                     }));
        return new RemoteFunctionCall<List>(function,
                                            new Callable<List>() {
                                                @Override
                                                @SuppressWarnings("unchecked")
                                                public List call() throws Exception {
                                                    List<Type> result =
                                                            (List<Type>) executeCallSingleValueReturn(function,
                                                                                                      List.class);
                                                    return convertToNative(result);
                                                }
                                            });
    }

    private GetDonationContractInfo convertToDonation(Object object) {
        GetDonationContractInfo donation = new GetDonationContractInfo();
        try {
            donation.setDonationId((BigInteger) object.getClass().getField("donationId").get(object));
            donation.setDonorName((String) object.getClass().getField("donorName").get(object));
            donation.setAmount((BigInteger) object.getClass().getField("amount").get(object));
            donation.setBlockHash((BigInteger) object.getClass().getField("blockHash").get(object));
            donation.setDonationTime((BigInteger) object.getClass().getField("donationTime").get(object));
            donation.setDonorToken((String) object.getClass().getField("donorToken").get(object));
            donation.setDonationHash((byte[]) object.getClass().getField("donationHash").get(object));
            donation.setPurposeId((BigInteger) object.getClass().getField("purposeId").get(object));
            donation.setPurpose((String) object.getClass().getField("purpose").get(object));
            donation.setFamilyId((BigInteger) object.getClass().getField("familyId").get(object));
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        } catch (NoSuchFieldException e) {
            throw new RuntimeException(e);
        }

        return donation;
    }


    @Deprecated
    public static DonationContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                        BigInteger gasPrice, BigInteger gasLimit) {
        return new DonationContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DonationContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                                        BigInteger gasPrice, BigInteger gasLimit) {
        return new DonationContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DonationContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                        ContractGasProvider contractGasProvider) {
        return new DonationContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DonationContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                                        ContractGasProvider contractGasProvider) {
        return new DonationContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DonationContract> deploy(Web3j web3j, Credentials credentials,
                                                      ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DonationContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DonationContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
                                                      BigInteger gasLimit) {
        return deployRemoteCall(DonationContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DonationContract> deploy(Web3j web3j, TransactionManager transactionManager,
                                                      ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DonationContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DonationContract> deploy(Web3j web3j, TransactionManager transactionManager,
                                                      BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DonationContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class DonationAddedEventResponse {
        public Log log;

        public BigInteger donationId;

        public String donorToken;

        public BigInteger blockHash;

        public byte[] donationHash;
    }

    public static class DonationUsageAddedEventResponse extends BaseEventResponse {
        public BigInteger donationId;

        public byte[] donationHash;

        public BigInteger blockHash;

        public byte[] usageHash;

        public BigInteger amount;
        public BigInteger usedAmount;
        public BigInteger remainingAmount;
    }
}






